#!/usr/bin/env bash

DOCKER_DEVBOX_HOME="${DOCKER_DEVBOX_HOME:-$HOME/.docker-devbox}"
DOCKER_DEVBOX_BIN="${DOCKER_DEVBOX_HOME}/bin"

if [[ -d "${DOCKER_DEVBOX_HOME}" ]]; then
  _LOG="${DOCKER_DEVBOX_HOME}/docker-devbox-installer.log"
else
  _LOG="${PWD}/docker-devbox-installer.log"
fi

echo "">"$_LOG"

if [[ $EUID -eq 0 ]] && [[ -z "${DOCKER_DEVBOX_ALLOW_ROOT}" ]]
then
  echo "Please run as non-root user or set DOCKER_DEVBOX_ALLOW_ROOT environment variable." 2>&1 | tee -a "$_LOG"
  exit 1
fi

if [[ $EUID -eq 0 ]]; then
  SUDO_EXE=""
else
  SUDO_EXE=$(command -v sudo)
  if [[ ! -x "$SUDO_EXE" ]]; then
    echo "sudo is not available." 2>&1 | tee -a "$_LOG"
  fi
fi

if [[ ! -x $(command -v docker) ]]; then
  echo "Please install docker and docker-compose before installing docker devbox."
  exit 1
fi

if [[ ! -x $(command -v docker-compose) ]]; then
  echo "Please install docker-compose before installing docker devbox."
  exit 1
fi

MAKE_EXE="$(command -v make)"
JQ_EXE="$(command -v jq)"
BASH_EXE="$(command -v bash)"

if [[ ! -z "$(command -v apt-get)" ]]; then
  PACKAGE_INSTALL_COMMAND="apt-get -y install"
elif [[ ! -z "$(command -v yum)" ]]; then
  PACKAGE_INSTALL_COMMAND="yum -y install"
elif [ ! -z "$(command -v apk)" ]; then
  PACKAGE_INSTALL_COMMAND="apk add"
else
  PACKAGE_INSTALL_COMMAND=""
fi

if [ -z "$(command -v git)" ]; then
  if [[ ! -x "$SUDO_EXE" && $EUID -ne 0 ]]; then
    echo "Sudo is not available to install git. Install 'git' package manually and run the installer again."
    exit 1
  fi
  if [[ -z "$PACKAGE_INSTALL_COMMAND" ]]; then
    echo "No supported package manager found to install git. Install 'git' package manually and run the installer again."
    exit 1
  fi

  echo "Install git" 2>&1 | tee -a "$_LOG"
  $SUDO_EXE $PACKAGE_INSTALL_COMMAND git &>> "$_LOG"
fi

if [ -z "$(command -v make)" ]; then
  if [[ ! -x "$SUDO_EXE" && $EUID -ne 0 ]]; then
    echo "Sudo is not available to install make. Install 'make' package manually and run the installer again."
    exit 1
  fi
  if [[ -z "$PACKAGE_INSTALL_COMMAND" ]]; then
    echo "No supported package manager found to install make. Install 'make' package manually and run the installer again."
    exit 1
  fi

  echo "Install make" 2>&1 |& tee -a "$_LOG"
  $SUDO_EXE $PACKAGE_INSTALL_COMMAND make &>> "$_LOG"
fi

if [[ ! -z "${DOCKER_DEVBOX_CI}" ]]; then
  DOCKER_DEVBOX_MINIMAL=1
  DOCKER_DEVBOX_DISABLE_UPDATE=1
  DOCKER_DEVBOX_DISABLE_OPTIONAL_DEPENDENCIES=1
fi

export DOCKER_DEVBOX_REVERSE_PROXY_NETWORK="${DOCKER_DEVBOX_REVERSE_PROXY_NETWORK:-reverse-proxy}"

if [[ -d "${DOCKER_DEVBOX_HOME}" ]]; then
    if [[ -z "${DOCKER_DEVBOX_DISABLE_UPDATE}" ]]; then
        echo "Update Docker Devbox" 2>&1 |& tee -a "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" fetch --recurse-submodules &>> "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" reset --hard origin/master  &>> "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" submodule foreach --recursive git reset --hard origin/master &>> "$_LOG"
    else
        echo "Docker Devbox update is disabled" 2>&1 |& tee -a "$_LOG"
    fi
else
    echo "Install Docker Devbox" 2>&1 > "$_LOG"
    if [[ -z ${DOCKER_DEVBOX_MINIMAL} ]]; then
      git clone --recurse-submodules https://github.com/gfi-centre-ouest/docker-devbox "${DOCKER_DEVBOX_HOME}"
    else
      git clone https://github.com/gfi-centre-ouest/docker-devbox "${DOCKER_DEVBOX_HOME}"
      git -C "${DOCKER_DEVBOX_HOME}" submodule update --init scripts
    fi
fi

mkdir -p $DOCKER_DEVBOX_BIN

if [[ -f "$HOME/.bashrc" ]]; then
  cat "$HOME/.bashrc" | grep "export PATH=\"$DOCKER_DEVBOX_BIN:\$PATH\"" &> /dev/null
  BASH_RC_CONFIGURED=$?
  if [[ "$BASH_RC_CONFIGURED" -ne 0 ]]; then
    echo "Add $DOCKER_DEVBOX_BIN to path (.bashrc)" 2>&1 |& tee -a "$_LOG"

    cat << EOF >> "$HOME/.bashrc"

# Add docker-devbox bin to PATH
export PATH="$DOCKER_DEVBOX_BIN:\$PATH"
EOF
  fi
elif [[ -f "$HOME/.bash_profile" ]]; then
  cat "$HOME/.bash_profile" | grep "export PATH=\"$DOCKER_DEVBOX_BIN:\$PATH\"" &> /dev/null
  BASH_PROFILE_CONFIGURED=$?
  if [[ "$BASH_PROFILE_CONFIGURED" -ne 0 ]]; then
    echo "Add $DOCKER_DEVBOX_BIN to path (.bash_profile)" 2>&1 |& tee -a "$_LOG"

    cat << EOF >> "$HOME/.bash_profile"

# Add docker-devbox bin to PATH
export PATH="$DOCKER_DEVBOX_BIN:\$PATH"
EOF
  fi
fi

export PATH="$DOCKER_DEVBOX_BIN:$PATH"

if [[ -z "${DOCKER_DEVBOX_DISABLE_OPTIONAL_DEPENDENCIES}" ]]; then
    if [ -z "$(command -v curl)" ]; then
      if [[ ! -x "$SUDO_EXE" && $EUID -ne 0 ]]; then
        echo "Sudo is not available to install curl. Install 'curl' package manually and run the installer again."
        exit 1
      fi
      if [[ -z "$PACKAGE_INSTALL_COMMAND" ]]; then
        echo "No package manager found to install curl. Install 'curl' package manually and run the installer again."
        exit 1
      fi

      echo "Install curl" 2>&1 | tee -a "$_LOG"
      $SUDO_EXE $PACKAGE_INSTALL_COMMAND curl &>> "$_LOG"
    fi

    _CFSSL_CLI_VERSION=$(curl -s https://api.github.com/repos/Toilal/python-cfssl-cli/releases/latest | grep 'tag_name' | cut -d\" -f4)
    _CFSSL_CLI_INSTALL=1
    if [ ! -z "$(command -v cfssl-cli)" ]; then
      cfssl-cli --version | grep "cfssl-cli, version $_CFSSL_CLI_VERSION" &>> "$_LOG"
      _CFSSL_CLI_INSTALL=$?
    fi

    if [ "$_CFSSL_CLI_INSTALL" -ne 0 ]; then
      echo "Install cfssl-cli ($_CFSSL_CLI_VERSION)" 2>&1 |& tee "$_LOG"

      curl -sL -o ./cfssl-cli https://github.com/Toilal/python-cfssl-cli/releases/download/$_CFSSL_CLI_VERSION/cfssl-cli &>> "$_LOG"
      mv -f ./cfssl-cli "$DOCKER_DEVBOX_BIN" &>> "$_LOG"
      chmod +x "$DOCKER_DEVBOX_BIN"/cfssl-cli &>> "$_LOG"
    fi

    _MKCERT_VERSION=$(curl -s https://api.github.com/repos/FiloSottile/mkcert/releases/latest | grep 'tag_name' | cut -d\" -f4)
    _MKCERT_INSTALL=1
    if [[ -f ""$DOCKER_DEVBOX_BIN"/.mkcert.version" ]]; then
        if [[ $(cat "$DOCKER_DEVBOX_BIN"/.mkcert.version) == "${_MKCERT_VERSION}" ]]; then
          _MKCERT_INSTALL=0
        fi
    fi

    if [ "$_MKCERT_INSTALL" -ne 0 ]; then
      echo "Install mkcert ($_MKCERT_VERSION)" 2>&1 |& tee "$_LOG"

      curl -fsSL -o ./mkcert "https://github.com/FiloSottile/mkcert/releases/download/$_MKCERT_VERSION/mkcert-$_MKCERT_VERSION-linux-amd64" &>> "$_LOG"
      mv -f ./mkcert "$DOCKER_DEVBOX_BIN" &>> "$_LOG"
      chmod +x "$DOCKER_DEVBOX_BIN"/mkcert &>> "$_LOG"
      
      echo "$_MKCERT_VERSION" > "$DOCKER_DEVBOX_BIN"/.mkcert.version
    fi
fi

echo "Create $DOCKER_DEVBOX_REVERSE_PROXY_NETWORK docker network" 2>&1 |& tee -a "$_LOG"
docker network create "$DOCKER_DEVBOX_REVERSE_PROXY_NETWORK" &>> "$_LOG" || true

if [[ -z "${DOCKER_DEVBOX_MINIMAL}" ]]; then
    if [[ -z "${DOCKER_DEVBOX_DISABLE_SMARTCD}" ]]; then
        echo "Install SmartCD" 2>&1 |& tee -a "$_LOG"
        cd /tmp &>> "$_LOG"
        rm -Rf smartcd &>> "$_LOG"
        git clone https://github.com/gfi-centre-ouest/smartcd.git &>> "$_LOG"
        cd smartcd &>> "$_LOG"
        make install &>> "$_LOG"
        source load_smartcd &>> "$_LOG"
        rm -Rf smartcd &>> "$_LOG"
        cd $HOME &>> "$_LOG"

        if [[ ! -f "$HOME/.smartcd_config" ]]; then
            cat << 'EOF' > $HOME/.smartcd_config
# Load and configure smartcd
source $HOME/.smartcd/lib/core/arrays
source $HOME/.smartcd/lib/core/varstash
source $HOME/.smartcd/lib/core/smartcd
# smartcd setup chpwd-hook
smartcd setup cd
smartcd setup pushd
smartcd setup popd
# smartcd setup prompt-hook
# smartcd setup exit-hook
smartcd setup completion
# VARSTASH_AUTOCONFIGURE=1
# VARSTASH_AUTOEDIT=1
# SMARTCD_NO_INODE=1
# SMARTCD_AUTOMIGRATE=1
SMARTCD_LEGACY=1
SMARTCD_QUIET=1
# VARSTASH_QUIET=1
EOF
            echo "SmartCD configuration file has been written (~/.smartcd_config)" 2>&1 |& tee -a "$_LOG"
        fi

        cat $HOME/.bashrc | grep .smartcd_config &> /dev/null
        BASHRC_CONFIGURED=$?
        if [[ "$BASHRC_CONFIGURED" -ne 0 ]]; then
            cat << 'EOF' >> "$HOME/.bashrc"

# SmartCD Configuration
[ -r "$HOME/.smartcd_config" ] && ( [ -n $BASH_VERSION ] || [ -n $ZSH_VERSION ] ) && source $HOME/.smartcd_config
EOF
            echo "SmartCD registered (~/.bashrc)" 2>&1 |& tee -a "$_LOG"
        fi
    else
        echo "SmartCD is disabled" 2>&1 |& tee -a "$_LOG"
    fi

    cd "${DOCKER_DEVBOX_HOME}"/cfssl &>> "$_LOG"
    source .bash_enter &>> "$_LOG"
    echo "Stop CFSSL" 2>&1 |& tee -a "$_LOG"
    dc down --remove-orphans &>> "$_LOG"
    if [[ -z "${DOCKER_DEVBOX_DISABLE_CFSSL}" ]]; then
       echo "Install CFSSL" 2>&1 |& tee -a "$_LOG"
       dc pull &>> "$_LOG" || true
       echo "Start CFSSL" 2>&1 |& tee -a "$_LOG"
       dc up -d &>> "$_LOG"
       sleep 10 &>> "$_LOG"
       install-cfssl-ca &>> "$_LOG"
    else
        echo "CFSSL is disabled" 2>&1 |& tee -a "$_LOG"
    fi
    source .bash_leave &>> "$_LOG"
    cd $HOME &>> "$_LOG"

    cd "${DOCKER_DEVBOX_HOME}"/portainer &>> "$_LOG"
    source .bash_enter &>> "$_LOG"
    echo "Stop portainer" 2>&1 |& tee -a "$_LOG"
    dc down --remove-orphans &>> "$_LOG"
    if [[ -z "${DOCKER_DEVBOX_DISABLE_PORTAINER}" ]]; then
         echo "Install portainer" 2>&1 |& tee -a "$_LOG"
         dc pull &>> "$_LOG" || true
         echo "Start portainer" 2>&1 |& tee -a "$_LOG"
         dc up -d &>> "$_LOG"
    else
        echo "Portainer is disabled" 2>&1 |& tee -a "$_LOG"
    fi
    source .bash_leave &>> "$_LOG"
    cd $HOME &>> "$_LOG"

    if [[ -z "${DOCKER_DEVBOX_DISABLE_REVERSE_PROXY}" ]]; then
        if [[ -z "${DOCKER_DEVBOX_USE_NGINX_PROXY}" ]]
        then
            echo "Use traefik as reverse proxy"
            cd "${DOCKER_DEVBOX_HOME}"/nginx-proxy &>> "$_LOG"
            source .bash_enter &>> "$_LOG"
            echo "Stop nginx-proxy" 2>&1 |& tee -a "$_LOG"
            dc down --remove-orphans &>> "$_LOG"
            source .bash_leave &>> "$_LOG"
            cd "${DOCKER_DEVBOX_HOME}"/traefik &>> "$_LOG"
            source .bash_enter &>> "$_LOG"
            echo "Stop traefik" 2>&1 |& tee -a "$_LOG"
            dc down --remove-orphans &>> "$_LOG"
            echo "Install traefik" 2>&1 |& tee -a "$_LOG"
            dc pull &>> "$_LOG" || true
            echo "Start traefik" 2>&1 |& tee -a "$_LOG"
            dc up -d &>> "$_LOG"
            source .bash_leave &>> "$_LOG"
            cd $HOME &>> "$_LOG"
        else
            echo "Use nginx-proxy as reverse proxy"
            cd "${DOCKER_DEVBOX_HOME}"/traefik &>> "$_LOG"
            source .bash_enter &>> "$_LOG"
            echo "Stop traefik" 2>&1 |& tee -a "$_LOG"
            dc down --remove-orphans &>> "$_LOG"
            source .bash_leave &>> "$_LOG"
            echo "Stop nginx-proxy" 2>&1 |& tee -a "$_LOG"
            cd "${DOCKER_DEVBOX_HOME}"/nginx-proxy &>> "$_LOG"
            source .bash_enter &>> "$_LOG"
            dc down --remove-orphans &>> "$_LOG"
            echo "Install nginx-proxy" 2>&1 |& tee -a "$_LOG"
            dc pull &>> "$_LOG" || true
            echo "Start nginx-proxy" 2>&1 |& tee -a "$_LOG"
            dc up -d &>> "$_LOG"
            source .bash_leave &>> "$_LOG"
            cd $HOME &>> "$_LOG"
        fi
    else
        echo "Reverse proxy is disabled" 2>&1 |& tee -a "$_LOG"
    fi

    echo "Docker Devbox installation is terminated." 2>&1 |& tee -a "$_LOG"
else
    echo "Docker Devbox installation is terminated (minimal)." 2>&1 |& tee -a "$_LOG"
fi

if [[ -f $HOME/.smartcd_config ]]; then
  source $HOME/.smartcd_config
fi
